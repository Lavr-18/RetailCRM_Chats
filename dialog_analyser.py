import os
import re
import logging
from datetime import datetime
from collections import Counter
import openai
import json
import config
from config import PROMPT_TEMPLATE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è OpenAI ---
try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º config.OPENAI_API_KEY, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ load_dotenv() –≤ config.py
    OPENAI_API_KEY = config.OPENAI_API_KEY
    if not OPENAI_API_KEY:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")
        exit(1)
except AttributeError:
    logger.error("–í —Ñ–∞–π–ª–µ config.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI —Å –Ω–æ–≤—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä: gpt-5-mini. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–Ω–æ–º–∏–∏.
RECOMMENDED_MODEL = "gpt-5-mini"


def parse_openai_response(response: str) -> tuple[dict, str] | None:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI, —Ä–∞–∑–¥–µ–ª—è—è JSON –∏ SUMMARY.
    –ü–∞—Ä—Å–µ—Ä —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –æ–±–µ—Ä–Ω—É—Ç—ã–π (```json) –∏ –Ω–µ–æ–±–µ—Ä–Ω—É—Ç—ã–π (–ø—Ä—è–º–æ–π JSON –ø–µ—Ä–µ–¥ ---SUMMARY---).
    """
    logger.debug(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ OpenAI. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤.")
    json_part = None

    # 1. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –±–ª–æ–∫ JSON, –æ–±–µ—Ä–Ω—É—Ç—ã–π –≤ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ —Å —Ç–µ–≥–æ–º json (–∏–¥–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    json_match = re.search(r'```json\s*({.*?})\s*```', response, re.DOTALL)

    if json_match:
        json_part = json_match.group(1).strip()
        logger.debug("JSON-–±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–µ—Ä—Ç–∫–µ '```json'.")
    else:
        # 2. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ù–ï–û–ë–ï–†–ù–£–¢–´–ô –±–ª–æ–∫ JSON, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥ ---SUMMARY---
        # –ò—â–µ–º –æ—Ç –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏/–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è ---SUMMARY---
        unwrapped_match = re.search(r'({.*?})\s*---SUMMARY---', response, re.DOTALL)

        if unwrapped_match:
            logger.warning("JSON-–±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω, –Ω–æ –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ '```json'. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–æ–±–µ—Ä–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.")
            json_part = unwrapped_match.group(1).strip()

    if not json_part:
        logger.error("–í –æ—Ç–≤–µ—Ç–µ OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ JSON.")
        return None, None

    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è summary
    summary_match = re.search(r'---SUMMARY---(.*)', response, re.DOTALL)
    if not summary_match:
        logger.warning("–í –æ—Ç–≤–µ—Ç–µ OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '---SUMMARY---'.")
        summary_part = ""
    else:
        summary_part = summary_match.group(1).strip()

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON
        json_data = json.loads(json_part)
        logger.debug("JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return json_data, summary_part
    except json.JSONDecodeError as e:
        logger.error(f"JSONDecodeError: {e}. –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON, –∑–∞–º–µ–Ω—è—è –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ.")
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É —Å –æ–¥–∏–Ω–∞—Ä–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
        json_part = json_part.replace("'", "\"")
        try:
            json_data = json.loads(json_part)
            logger.info("JSON —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return json_data, summary_part
        except json.JSONDecodeError as e_fixed:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e_fixed}", exc_info=True)
            return None, None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ OpenAI: {e}", exc_info=True)
        return None, None


def analyze_dialog(dialog_text: str, categories: list) -> tuple[dict, str] | None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ OpenAI API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑—é–º–µ.
    """
    logger.info(f"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–º–æ—â—å—é OpenAI, –º–æ–¥–µ–ª—å: {RECOMMENDED_MODEL}.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PROMPT_TEMPLATE –∏–∑ config.
    # PROMPT_TEMPLATE —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {0} –∏ {1} –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ config.py).
    prompt = PROMPT_TEMPLATE.format(
        ", ".join([f"'{cat}'" for cat in categories]),
        dialog_text
    )
    logger.debug(f"Prompt –¥–ª—è OpenAI: {prompt[:200]}...")

    try:
        response = client.chat.completions.create(
            model=RECOMMENDED_MODEL,
            messages=[{"role": "user", "content": prompt}],
        )
        logger.info("–ó–∞–ø—Ä–æ—Å –∫ OpenAI —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

        raw_response = response.choices[0].message.content
        # –£—Ä–æ–≤–µ–Ω—å DEBUG –ø–æ–∫–∞–∂–µ—Ç —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –≤ –ª–æ–≥–∞—Ö
        logger.debug(f"Raw OpenAI response:\n{raw_response}")

        json_data, summary = parse_openai_response(raw_response)

        if json_data and summary:
            logger.info("–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            return json_data, summary
        else:
            logger.warning("–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –¥–∞–ª –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None.")
            return None, None
    except openai.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API OpenAI: {e}")
        return None, None
    except openai.APIConnectionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API OpenAI: {e}")
        return None, None
    except openai.RateLimitError as e:
        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API OpenAI: {e}")
        return None, None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI: {e}", exc_info=True)
        return None, None


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ---
def parse_dialog_file(file_path: str) -> str | None:
    """
    –ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–∏–∞–ª–æ–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
    """
    logger.info(f"–ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∏–∞–ª–æ–≥–∞: {file_path}")
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            logger.info("–§–∞–π–ª –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω.")
            return content
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}", exc_info=True)
        return None


# --- –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢–û–í–´–ô –ú–û–î–£–õ–¨ (–ü–†–û–í–ï–†–ö–ê –ü–ê–†–°–ò–ù–ì–ê) ---
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    # –£—Ä–æ–≤–µ–Ω—å INFO –ø–æ–∫–∞–∂–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    logger.info("=======================================")
    logger.info("–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê –î–ò–ê–õ–û–ì–ê (OpenAI)")
    logger.info("=======================================")

    test_dialog = """
[2025-10-11T10:38:00.800851] –ö–õ–ò–ï–ù–¢: –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∞ –∞–∑–∞–ª–∏—è –º–Ω–æ–≥–æ–ª–µ—Ç–Ω—è—è –∂–µ, –∫–∞–∫ –¥–æ–ª–≥–æ –≤ –≥–æ–¥—É —Ü–≤–µ—Ç–µ—Ç?
[2025-10-11T10:40:33.993456] –ú–ï–ù–ï–î–ñ–ï–†: –ò—Ä–∏–Ω–∞, –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ! –í –≥–æ–¥—É –æ–Ω–∞ —Ü–≤–µ—Ç–µ—Ç 2-3 —Ä–∞–∑–∞ –∏ –µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç –¥–≤—É—Ö –¥–æ —à–µ—Å—Ç–∏ –Ω–µ–¥–µ–ª—åüå∏
[2025-10-11T10:41:49.463346] –ö–õ–ò–ï–ù–¢: –¢–æ–≥–¥–∞ —è –±—ã –µ—â–µ 2 –∫–∞—à–ø–æ —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ –û–ª—å–≥–µ –ø–µ—Ä–µ–¥–∞–ª–∞ –ø–æ–ø—Ä–æ—Å–∏–ª–∞ —Å–æ–±—Ä–∞—Ç—å. –ß—Ç–æ–±—ã –≤—Å–µ 3 —Ü–≤–µ—Ç–∞ –±—ã–ª–∏, –º–∞–ª–∏–Ω–æ–≤—ã–π, —Ä–æ–∑–æ–≤—ã–π –∏ –±–µ–ª—ã–π.
[2025-10-11T10:42:15.985703] –ö–õ–ò–ï–ù–¢: –ü—Ä—Å—á–∏—Ç–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –í—Å–µ –≤–º–µ—Å—Ç–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ–∑—Ç–∏.
    """

    # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º config.CATEGORIES –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    test_categories_for_model = config.CATEGORIES

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ó–∞–∫–∞–∑, –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∏ —Ç.–¥.)
        result_json, result_summary = analyze_dialog(test_dialog, test_categories_for_model)

        if result_json and result_summary:
            logger.info("\n=======================================")
            logger.info("‚úÖ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù")
            logger.info("=======================================")
            print("\n--- –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô JSON (–°–ö–û–†–ò–ù–ì) ---")
            # –ü–µ—á–∞—Ç–∞–µ–º JSON, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            print(json.dumps(result_json, indent=4, ensure_ascii=False))
            print("\n--- –†–ï–ó–Æ–ú–ï (SUMMARY) ---")
            print(result_summary)
            print("=======================================\n")
        else:
            logger.error("\n‚ùå –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô –ò–õ–ò –ù–ï –í–ï–†–ù–£–õ –í–ê–õ–ò–î–ù–´–• –î–ê–ù–ù–´–•.")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –º–æ–¥—É–ª–µ: {e}", exc_info=True)