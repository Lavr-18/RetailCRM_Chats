# dialog_listener.py

import json
import logging
import os
import time
import requests
import websocket
from threading import Thread
from datetime import datetime
import re
import urllib.parse

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from dialog_analyser import analyze_dialog
from data_exporter import move_dialog_to_closed, process_and_export_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –≤ main.py)
logger = logging.getLogger(__name__)

# --------------------------------------- #
#        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# --------------------------------------- #
try:
    import config

    API_URL = config.RETAILCRM_API_URL
    TOKEN = config.RETAIL_CRM_BOT_TOKEN
    TELEGRAM_BOT_TOKEN = config.TELEGRAM_BOT_TOKEN
    TELEGRAM_CHAT_ID = config.TELEGRAM_CHAT_ID
    TELEGRAM_TOPIC_ID = config.TELEGRAM_TOPIC_ID
    TELEGRAM_WARNINGS_TOPIC_ID = config.TELEGRAM_WARNINGS_TOPIC_ID
except ImportError:
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª config.py. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    exit(1)
except AttributeError as e:
    logger.error(f"–í —Ñ–∞–π–ª–µ config.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {e}")
    exit(1)

HEADERS = {"X-Bot-Token": TOKEN, "Content-Type": "application/json"}

MAX_RECONNECT_ATTEMPTS = 10
RECONNECT_DELAY = 5
MAX_RECONNECT_DELAY = 60


# --------------------------------------- #
#           –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------------------------- #

def send_telegram_notification(text: str, topic_id: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram-–≥—Ä—É–ø–ø—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º.
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'message_thread_id': topic_id,
        'text': text,
        'parse_mode': 'MarkdownV2'
    }

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    special_chars = r'_*[]()~`>#+-=|{}.!'
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    payload['text'] = text

    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")


def check_for_unauthorized_links(message_data: dict):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    try:
        if message_data.get('from', {}).get('type') == 'user':
            message_content = message_data.get('content', '')

            # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
            urls = re.findall(r'(https?://[^\s]+)', message_content)

            if not urls:
                return

            manager_name = message_data.get('from', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä')
            dialog_id = message_data.get('dialog', {}).get('id')

            for url in urls:
                parsed_url = urllib.parse.urlparse(url)
                domain = parsed_url.netloc.replace('www.', '')

                if any(domain == d for d in config.ALLOWED_PAYMENT_DOMAINS):
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç {manager_name} –≤ –¥–∏–∞–ª–æ–≥–µ {dialog_id}.")
                else:
                    logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç {manager_name} –≤ –¥–∏–∞–ª–æ–≥–µ {dialog_id}: {url}")
                    notification_text = (
                        f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
                        f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}\n"
                        f"–î–∏–∞–ª–æ–≥ ID: {dialog_id}\n"
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}\n\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_content}"
                    )
                    send_telegram_notification(notification_text, config.TELEGRAM_WARNINGS_TOPIC_ID)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–æ–∫: {e}")


# --------------------------------------- #
#      –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
# --------------------------------------- #
def save_message_to_file(dialog_id: int, client_phone: str, sender_type: str, message_text: str, timestamp: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–∏–∞–ª–æ–≥–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç dialog_id –∏ client_phone –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    """
    active_dir = 'dialogs/active'
    if not os.path.exists(active_dir):
        os.makedirs(active_dir)

    file_name = f'dialog_{dialog_id}_{client_phone}.txt'
    file_path = os.path.join(active_dir, file_name)
    formatted_message = f"[{timestamp}] {sender_type.upper()}: {message_text}\n"

    try:
        with open(file_path, 'a', encoding='utf-8') as f:
            f.write(formatted_message)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {dialog_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª {file_path}: {e}")


# --------------------------------------- #
#   Callbacks WebSocket –¥–ª—è RetailCRM
# --------------------------------------- #

def on_message(ws, message):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ WebSocket.
    –ü–∞—Ä—Å–∏—Ç JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        data = json.loads(message)
        # --- –ë–õ–û–ö –û–¢–õ–ê–î–ö–ò: –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ ---
        logger.info(f"–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")
        # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –û–¢–õ–ê–î–ö–ò ---

        event_type = data.get("type")

        if event_type == "message_new":
            message_data = data.get("data", {}).get("message", {})
            dialog_id = message_data.get("dialog", {}).get("id")
            sender_type = message_data.get("from", {}).get("type")
            incoming_type = message_data.get("type")
            client_phone = message_data.get("chat", {}).get("customer", {}).get("phone", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            timestamp = datetime.now().isoformat()

            if not dialog_id:
                logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç dialog_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            if sender_type in ["user", "customer"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –º–µ–Ω–µ–¥–∂–µ—Ä
                check_for_unauthorized_links(message_data)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
                if incoming_type == "text":
                    content = message_data.get("content", {})
                    message_text = content.get("text") if isinstance(content, dict) else str(content)
                    role = "–ö–ª–∏–µ–Ω—Ç" if sender_type == 'customer' else "–ú–µ–Ω–µ–¥–∂–µ—Ä"
                    save_message_to_file(dialog_id, client_phone, role, message_text, timestamp)
                elif incoming_type == "image":
                    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    message_text = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                    role = "–ö–ª–∏–µ–Ω—Ç" if sender_type == 'customer' else "–ú–µ–Ω–µ–¥–∂–µ—Ä"
                    save_message_to_file(dialog_id, client_phone, role, message_text, timestamp)
                else:
                    logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {incoming_type}.")
            else:
                logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç '{sender_type}'")

        elif event_type == "dialog_closed":
            dialog_data = data.get('data', {}).get('dialog', {})
            dialog_id = dialog_data.get('id')

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è data_exporter.py
            client_phone = dialog_data.get('chat', {}).get('customer', {}).get('phone', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            manager_name = dialog_data.get('last_dialog', {}).get('responsible', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            if dialog_id:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {dialog_id}.")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                thread = Thread(
                    target=process_and_export_data,
                    args=(dialog_id, client_phone)
                )
                thread.start()
            else:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ dialog_closed, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç dialog_id.")

    except json.JSONDecodeError:
        logger.error(f"JSONDecodeError: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")


def on_error(ws, error):
    logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {error}")


def on_close(ws, close_status_code, close_msg):
    logger.warning(f"WebSocket –∑–∞–∫—Ä—ã—Ç: {close_status_code} - {close_msg}")


def on_open(ws):
    logger.info("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    ws.reconnect_attempts = 0
    ws.reconnect_delay = RECONNECT_DELAY


# --------------------------------------- #
#   –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# --------------------------------------- #

def create_websocket():
    """
    –°–æ–∑–¥–∞—ë—Ç WebSocketApp –¥–ª—è RetailCRM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
    """
    ws_url = f"{API_URL.replace('https://', 'wss://')}/ws?events=message_new,dialog_closed"
    ws = websocket.WebSocketApp(
        ws_url,
        header=["X-Bot-Token: " + TOKEN],
        on_message=on_message,
        on_error=on_error,
        on_close=on_close,
        on_open=on_open
    )
    ws.reconnect_attempts = 0
    ws.reconnect_delay = RECONNECT_DELAY
    return ws


def run_with_reconnect(ws):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç ws.run_forever –≤ —Ü–∏–∫–ª–µ, —á—Ç–æ–±—ã –ø—Ä–∏ –æ–±—Ä—ã–≤–µ —Å–≤—è–∑–∏
    –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è.
    """
    while True:
        if ws.reconnect_attempts >= MAX_RECONNECT_ATTEMPTS:
            logger.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å. —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {MAX_RECONNECT_ATTEMPTS}")
            break

        if ws.reconnect_attempts > 0:
            logger.info(f"–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {ws.reconnect_attempts}/{MAX_RECONNECT_ATTEMPTS}...")
        else:
            logger.info("–°—Ç–∞—Ä—Ç WebSocket...")

        try:
            ws.run_forever(ping_interval=30, ping_timeout=10)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ ws.run_forever: {e}")

        current_attempts = getattr(ws, 'reconnect_attempts', 0) + 1
        current_delay = min(getattr(ws, 'reconnect_delay', 5) * 2, MAX_RECONNECT_DELAY)
        logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ {current_delay} —Å...")
        time.sleep(current_delay)

        ws_new = create_websocket()
        ws_new.reconnect_attempts = current_attempts
        ws_new.reconnect_delay = current_delay
        ws = ws_new


# --------------------------------------- #
#         –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
# --------------------------------------- #

def start_listener():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π.
    """
    try:
        test_request = requests.get(f"{API_URL}/bots", headers=HEADERS)
        if test_request.status_code == 403:
            logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")
            return
    except requests.exceptions.RequestException as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API RetailCRM: {e}")
        return

    ws = create_websocket()
    ws_thread = Thread(target=run_with_reconnect, args=(ws,), daemon=True)
    ws_thread.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")