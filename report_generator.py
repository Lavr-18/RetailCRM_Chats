import logging
import os
import sys
import re
import requests
from datetime import datetime, date, timedelta, time as dt_time
from glob import glob
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
# –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config –∏ data_exporter
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
import config
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ data_exporter
from data_exporter import normalize_phone, process_and_export_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ ---
DIALOG_DIR_ACTIVE = 'dialogs/active'
DIALOG_DIR_CLOSED = 'dialogs/closed'
DIALOG_FILE_REGEX = r'dialog_(\d+)_(\d+)\.txt'
MAX_DIALOG_AGE_DAYS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (3 –¥–Ω—è)

# –ì—Ä—É–ø–ø–∞ "–ù–æ–≤—ã–π" –¥–ª—è –ú–µ—Ç—Ä–∏–∫–∏ 2
STATUS_GROUP_NEW = {"new", "gotovo-k-soglasovaniiu", "agree-absence"}
# –ì—Ä—É–ø–ø–∞ "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ" –¥–ª—è –ú–µ—Ç—Ä–∏–∫–∏ 2
STATUS_GROUP_AGREEMENT = {"client-confirmed", "ne-dozvonilis", "perezvonit-pozdnee", "klient-zhdet-foto-s-zakupki",
                          "vizit-v-shourum",
                          "ozhidaet-oplaty", "gotovim-kp", "soglasovanie-kp", "kp-gotovo-k-zashchite", "proekt-visiak",
                          "soglasovano",
                          "oplacheno", "proverka-nalichiia", "oplata-ne-proshla"}
# –í—Å–µ —Ü–µ–ª–µ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–ú–µ—Ç—Ä–∏–∫–∞ 2)
TARGET_STATUSES = STATUS_GROUP_NEW.union(STATUS_GROUP_AGREEMENT)
# –°—Ç–∞—Ç—É—Å—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –æ–ø–ª–∞—Ç—É/–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É (–ú–µ—Ç—Ä–∏–∫–∞ 6)
PAYMENT_STATUSES = {
    "oplacheno", "novyi-oplachen",  # –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    "predoplata-poluchena", "novyi-predoplachen", "prepayed",  # –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
    "servisnoe-obsluzhivanie-oplacheno", "vyezd-biologa-oplachen"  # –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ 2
MAX_ORDER_AGE_DAYS = 2

# –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è –º–µ—Ç—Ä–∏–∫ 3, 4, 5: 9:00 –¥–æ 20:00
WORK_START_TIME = dt_time(9, 0)
WORK_END_TIME = dt_time(20, 0)
# –í—Ä–µ–º—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–µ—Ç—Ä–∏–∫, –Ω–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
REPORT_END_TIME = dt_time(23, 30)


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram (–≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è data_exporter.send_to_telegram) ---
def send_report_to_telegram(text: str, topic_id: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram-–≥—Ä—É–ø–ø—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º.
    """
    url = f"https://api.telegram.org/bot{config.TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': config.TELEGRAM_CHAT_ID,
        'message_thread_id': topic_id,
        'text': text,
        'parse_mode': 'HTML'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML, —Ç–∞–∫ –∫–∞–∫ –≤ –æ—Ç—á–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ–≥–∏ <b> –∏ <a>
    }

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è HTML –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Ç–∞–∫–æ–º –æ–±—ä–µ–º–µ, –∫–∞–∫ –¥–ª—è MarkdownV2,
    # –Ω–æ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö HTML-—Å—É—â–Ω–æ—Å—Ç–µ–π,
    # –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç.

    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
        logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –≤ Telegram: {e}")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def format_timedelta(td: timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timedelta –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '–ß—á –º—Å'."""
    total_seconds = int(td.total_seconds())
    hours, remainder = divmod(total_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    parts = []
    if hours > 0:
        parts.append(f"{hours} —á")
    if minutes > 0 or (hours == 0 and seconds > 0):
        parts.append(f"{minutes} –º")

    if not parts and seconds > 0:
        return f"{seconds} —Å"

    return " ".join(parts) or "0 —Å"


def parse_dialog_line(line: str) -> dict | None:
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∏–∞–ª–æ–≥–∞."""
    match = re.match(r'^\[(.*?)\] (–ö–õ–ò–ï–ù–¢|–ú–ï–ù–ï–î–ñ–ï–†): (.*)$', line)
    if not match: return None
    timestamp_str, sender, content = match.groups()
    try:
        # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
        dt = datetime.fromisoformat(timestamp_str)
    except ValueError:
        return None
    return {'time': dt, 'sender': sender, 'content': content.strip()}


def get_dialog_file_details(file_path: str) -> dict | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –¥–∏–∞–ª–æ–≥–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {'dialog_id', 'client_phone', 'messages', 'file_path',
                     'first_message_time', 'last_message_time'}
    """
    file_name = os.path.basename(file_path)
    match = re.match(DIALOG_FILE_REGEX, file_name)
    if not match: return None

    dialog_id = int(match.group(1))
    client_phone = match.group(2)
    messages = []

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                parsed_msg = parse_dialog_line(line.strip())
                if parsed_msg: messages.append(parsed_msg)

        if not messages:
            return None

        return {
            'dialog_id': dialog_id,
            'client_phone': client_phone,
            'messages': messages,
            'file_path': file_path,
            'first_message_time': messages[0]['time'],
            'last_message_time': messages[-1]['time']  # <--- –î–û–ë–ê–í–õ–ï–ù–û: –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ {file_path}: {e}", exc_info=True)
        return None


def manage_and_get_dialogs(report_date: date) -> List[Dict[str, Any]]:
    """
    –†–µ–∞–ª–∏–∑—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏:
    1. –£–¥–∞–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥–∏, —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π (–ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è).
    2. –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏, –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–µ–≥–æ–¥–Ω—è, –∏–∑ 'active' –≤ 'closed' –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –æ—Ç—á–µ—Ç.
    3. –°–æ–±–∏—Ä–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –∏–∑ 'closed', –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–µ–≥–æ–¥–Ω—è, –¥–ª—è –æ—Ç—á–µ—Ç–∞.
    """
    # 3 –¥–Ω—è –Ω–∞–∑–∞–¥ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤)
    deletion_limit_dt = datetime.now() - timedelta(days=MAX_DIALOG_AGE_DAYS)

    all_files_for_check = glob(os.path.join(DIALOG_DIR_ACTIVE, 'dialog_*.txt')) + \
                          glob(os.path.join(DIALOG_DIR_CLOSED, 'dialog_*.txt'))

    today_dialogs_for_report = []

    for file_path in all_files_for_check:
        file_name = os.path.basename(file_path)
        details = get_dialog_file_details(file_path)

        if not details:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ñ–∞–π–ª–∞: {file_name}. –ü—Ä–æ–ø—É—Å–∫.")
            continue

        last_msg_time = details['last_message_time']

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (—Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π)
        if last_msg_time < deletion_limit_dt:
            try:
                os.remove(file_path)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –¥–∏–∞–ª–æ–≥ (–¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {last_msg_time.date()}): {file_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            continue

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç—á–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è)
        if last_msg_time.date() == report_date:

            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –≤ active, –µ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å (–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å)
            if file_path.startswith(DIALOG_DIR_ACTIVE):
                dialog_id = details['dialog_id']
                client_phone = details['client_phone']

                logger.info(
                    f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–∞–Ω–∞–ª–∏–∑ + –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ) –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ {dialog_id} –¥–ª—è –æ—Ç—á–µ—Ç–∞...")

                # process_and_export_data –≤—ã–ø–æ–ª–Ω–∏—Ç –∞–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ 'closed'
                # –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –≤ 'closed', –Ω–æ –æ–±—ä–µ–∫—Ç 'details'
                # –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç.
                try:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (–∫–∞–∫ –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ dialog_closed)
                    process_and_export_data(dialog_id, client_phone)

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ (—Å–æ–æ–±—â–µ–Ω–∏—è) –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    today_dialogs_for_report.append(details)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ {dialog_id} –¥–ª—è –æ—Ç—á–µ—Ç–∞: {e}")

            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ —É–∂–µ –≤ closed –ò –±—ã–ª –∑–∞–∫—Ä—ã—Ç —Å–µ–≥–æ–¥–Ω—è (–ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è), –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ –≤ –æ—Ç—á–µ—Ç
            elif file_path.startswith(DIALOG_DIR_CLOSED):
                today_dialogs_for_report.append(details)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(today_dialogs_for_report)} –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–∞ {report_date}.")
    return today_dialogs_for_report


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

# ... [–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: check_order_modification_today, get_relevant_orders_for_client,
# get_day_in_day_paid_orders, analyze_dialog_speed_and_status, process_new_dialogs –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π] ...


def check_order_modification_today(order_id: int, target_date: date) -> bool:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GET /api/v5/orders/history –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    –ø–æ –∑–∞–∫–∞–∑—É order_id –≤ —Ç–µ—á–µ–Ω–∏–µ target_date.
    """
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –∑–∞ {target_date}.")
    try:
        url = f"{config.RETAILCRM_BASE_URL}/api/v5/orders/history"
        headers = {'X-Api-Key': config.RETAILCRM_API_KEY}

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–±–µ–ª–æ–º (Y-m-d H:i:s), requests –∑–∞–∫–æ–¥–∏—Ä—É–µ—Ç –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
        start_dt_str = f"{target_date.strftime('%Y-%m-%d')} 00:00:00"
        end_dt_str = f"{target_date.strftime('%Y-%m-%d')} 23:59:59"

        params = {
            'filter[orderId]': order_id,
            'filter[startDate]': start_dt_str,
            'filter[endDate]': end_dt_str,
        }

        response = requests.get(url, headers=headers, params=params, timeout=10)
        response.raise_for_status()

        data = response.json()

        history_found = len(data.get('history', [])) > 0

        if history_found:
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω {target_date}.")
        else:
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω {target_date}.")

        return history_found

    except requests.exceptions.RequestException as e:
        response = getattr(e, 'response', None)
        if response is not None and response.status_code == 400:
            try:
                error_data = response.json()
                error_msg = error_data.get('errorMsg') or error_data.get('errors') or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ 400"
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ 400 –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {error_msg}. URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            except requests.exceptions.JSONDecodeError:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ 400 –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç API –≤ JSON. –°—Ç–∞—Ç—É—Å: {e}")
            except Exception:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}", exc_info=True)
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}", exc_info=True)

        return False


def get_relevant_orders_for_client(phone_number: str) -> Dict[str, Any]:
    """
    –ò—â–µ—Ç —Å—Ç—Ä–æ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π (–ù–û–í–´–ô) –∑–∞–∫–∞–∑ –¥–ª—è –ú–µ—Ç—Ä–∏–∫–∏ 2 –ò –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {
        'new_order': dict|None,
        'latest_order': dict|None,
        'is_client_active': bool
    }
    """
    # NOTE: 'today' –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∏–∑–º–µ–Ω–µ–Ω –°–ï–ì–û–î–ù–Ø,
    # –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç report_date. –≠—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –ú–µ—Ç—Ä–∏–∫–∏ 2.
    today = datetime.now().date()
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ RetailCRM –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}")
    normalized_phone = normalize_phone(phone_number)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = {'new_order': None, 'latest_order': None, 'is_client_active': False}
    if not normalized_phone: return result

    # --- –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ (–¥–æ 50 —à—Ç) ---
    try:
        url = f"{config.RETAILCRM_BASE_URL}/api/v5/orders"
        headers = {'X-Api-Key': config.RETAILCRM_API_KEY}
        params = {'filter[customer]': normalized_phone, 'limit': 50}
        response = requests.get(url, headers=headers, params=params, timeout=10)
        response.raise_for_status()
        all_client_orders = response.json().get('orders', [])

        if not all_client_orders:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ 0 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {normalized_phone}.")
            return result

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ {normalized_phone}: {e}", exc_info=True)
        return result

    latest_order = all_client_orders[0]  # –°–∞–º—ã–π —Å–≤–µ–∂–∏–π –∑–∞–∫–∞–∑
    result['latest_order'] = latest_order

    # --- –®–∞–≥ 2: –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ù–û–í–´–ï –∑–∞–∫–∞–∑—ã –≤ —Ü–µ–ª–µ–≤–æ–º —Å—Ç–∞—Ç—É—Å–µ) ---
    date_limit = datetime.now() - timedelta(days=MAX_ORDER_AGE_DAYS)

    for order in all_client_orders:
        created_at_str = order.get('createdAt')
        if not created_at_str: continue

        try:
            created_dt = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
        except ValueError:
            try:
                created_dt = datetime.strptime(created_at_str.split('.')[0], '%Y-%m-%d %H:%M:%S')
            except ValueError:
                continue

        status = order.get('status')

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –º–æ–ª–æ–¥–æ–π –∏ –≤ —Ü–µ–ª–µ–≤–æ–º —Å—Ç–∞—Ç—É—Å–µ - –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è "–ù–û–í–´–ú"
        if created_dt >= date_limit and status in TARGET_STATUSES:
            result['new_order'] = order
            result['is_client_active'] = True  # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
            logger.info(f"–ó–∞–∫–∞–∑ {order.get('id')} –ø—Ä–∏–∑–Ω–∞–Ω —Å—Ç—Ä–æ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º (–ù–û–í–´–ô).")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ latest_order - —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
            break

            # --- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä—ã–π –∑–∞–∫–∞–∑, –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–µ–≥–æ–¥–Ω—è) ---
    # –≠—Ç–æ—Ç —à–∞–≥ –Ω—É–∂–µ–Ω –¢–û–õ–¨–ö–û –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ "–ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞".

    if not result['is_client_active'] and latest_order:
        latest_order_id = latest_order.get('id')
        if latest_order_id and check_order_modification_today(latest_order_id, today):
            result['is_client_active'] = True  # –ê–∫—Ç–∏–≤–Ω—ã–π, –Ω–æ –Ω–µ –Ω–æ–≤—ã–π
            logger.info(
                f"–ö–ª–∏–µ–Ω—Ç {normalized_phone} –ø—Ä–∏–∑–Ω–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–º, —Ç.–∫. –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ {latest_order_id} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω —Å–µ–≥–æ–¥–Ω—è.")
        else:
            logger.info(f"–ö–ª–∏–µ–Ω—Ç {normalized_phone} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ (–Ω–æ–≤–æ–≥–æ/–∞–∫—Ç–∏–≤–Ω–æ–≥–æ) –∑–∞–∫–∞–∑–∞.")

    if result['new_order'] is None:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ 0 —Å—Ç—Ä–æ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö (–Ω–æ–≤—ã—Ö) –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è {normalized_phone}.")

    return result


def get_day_in_day_paid_orders(target_date: date) -> List[Dict[str, Any]]:
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞ {target_date}")

    # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Y-m-d
    target_date_str = target_date.strftime('%Y-%m-%d')

    try:
        url = f"{config.RETAILCRM_BASE_URL}/api/v5/orders"
        headers = {'X-Api-Key': config.RETAILCRM_API_KEY}

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–Ω—å –≤ –¥–µ–Ω—å
        params = {
            'filter[createdAtFrom]': target_date_str,
            'filter[createdAtTo]': target_date_str,
            'filter[extendedStatus][]': list(PAYMENT_STATUSES),
            'filter[statusUpdatedAtFrom]': target_date_str,
            'filter[statusUpdatedAtTo]': target_date_str,
            'limit': 100
        }

        response = requests.get(url, headers=headers, params=params, timeout=10)
        response.raise_for_status()

        data = response.json()

        day_in_day_orders = data.get('orders', [])

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(day_in_day_orders)} –∑–∞–∫–∞–∑–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å (—á–µ—Ä–µ–∑ API).")
        return day_in_day_orders

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω—å –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
        return []
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
        return []


def analyze_dialog_speed_and_status(dialog: dict) -> dict:
    messages = dialog['messages']
    response_times = []
    first_client_msg = None
    first_manager_response_time = None
    first_response_too_slow = False

    for i in range(len(messages)):
        msg = messages[i]

        if i > 0 and msg['sender'] == '–ú–ï–ù–ï–î–ñ–ï–†' and messages[i - 1]['sender'] == '–ö–õ–ò–ï–ù–¢':
            response_time = msg['time'] - messages[i - 1]['time']
            response_times.append(response_time)

        if msg['sender'] == '–ö–õ–ò–ï–ù–¢' and first_client_msg is None:
            first_client_msg = msg

        if first_client_msg and msg['sender'] == '–ú–ï–ù–ï–î–ñ–ï–†' and first_manager_response_time is None and msg['time'] > \
                first_client_msg['time']:
            first_manager_response_time = msg['time'] - first_client_msg['time']
            if first_manager_response_time > timedelta(minutes=5):
                first_response_too_slow = True

    last_msg = messages[-1]
    is_unanswered_working = False
    is_unanswered_non_working = False

    if last_msg['sender'] == '–ö–õ–ò–ï–ù–¢':
        last_msg_time = last_msg['time']

        if WORK_START_TIME <= last_msg_time.time() <= WORK_END_TIME:
            is_unanswered_working = True

        elif WORK_END_TIME < last_msg_time.time() <= REPORT_END_TIME:
            is_unanswered_non_working = True

    return {
        'first_response_too_slow': first_response_too_slow,
        'is_unanswered_working': is_unanswered_working,
        'is_unanswered_non_working': is_unanswered_non_working,
        'response_times': response_times
    }


def process_new_dialogs(dialogs: list) -> dict:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Å—á–∏—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï –∑–∞–∫–∞–∑—ã (–ú–µ—Ç—Ä–∏–∫–∞ 2) –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç
    –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –ê–ö–¢–ò–í–ù–û–ì–û (–Ω–æ–≤–æ–≥–æ/–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ) –∑–∞–∫–∞–∑–∞.
    """
    total_new_inquiries = len(dialogs)
    fiz_count = 0
    yur_count = 0
    orders_created_count = 0
    clients_without_order_data = []  # –•—Ä–∞–Ω–∏—Ç {'phone', 'latest_order_id'}

    for dialog in dialogs:
        phone = dialog['client_phone']
        order_info = get_relevant_orders_for_client(phone)

        new_order = order_info['new_order']  # –î–ª—è –ú–µ—Ç—Ä–∏–∫–∏ 2
        is_client_active = order_info['is_client_active']  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
        latest_order = order_info['latest_order']

        if new_order:
            # –ú–µ—Ç—Ä–∏–∫–∞ 2: –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –°–¢–†–û–ì–û –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ (–ù–û–í–´–ï) –∑–∞–∫–∞–∑—ã
            orders_created_count += 1
            order_type = new_order.get('orderType')

            if order_type == 'b2b':
                yur_count += 1
            else:
                fiz_count += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ "–±–µ–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ù–ï –∞–∫—Ç–∏–≤–µ–Ω
        if not is_client_active:
            latest_order_id = latest_order.get('id') if latest_order else None
            clients_without_order_data.append({'phone': phone, 'latest_order_id': latest_order_id})

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ (–ú–µ—Ç—Ä–∏–∫–∞ 2 - –¥–ª—è –Ω–µ-–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
    base_url_path = config.RETAILCRM_BASE_URL.replace('/api/v5', '')
    clients_without_order_links = []

    for client in clients_without_order_data:
        phone = client['phone']
        order_id = client['latest_order_id']

        if order_id:
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /orders/{id}/edit
            link = f"{base_url_path}/orders/{order_id}/edit"
            clients_without_order_links.append(link)
        else:
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ (Fallback)
            link = f"{base_url_path}/customers?filter[text]={phone}"
            clients_without_order_links.append(link)

    return {
        'total_new_inquiries': total_new_inquiries,
        'fiz_count': fiz_count,
        'yur_count': yur_count,
        'orders_created_count': orders_created_count,
        'clients_without_order_links': clients_without_order_links
    }


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ ---

def generate_daily_report():
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #2: –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã
    # –û—Ç—á–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ 23:00 –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
    report_date = datetime.now().date()

    logger.info(f"=== –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ {report_date} ===")

    # –ù–û–í–´–ô –®–ê–ì: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏, —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö, –∑–∞–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ —Å–±–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    dialogs_for_today = manage_and_get_dialogs(report_date)

    if not dialogs_for_today:
        logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    # --- –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ú–µ—Ç—Ä–∏–∫–∏ 3, 4, 5) ---
    all_response_times_td = []
    slow_first_response_count = 0
    unanswered_working_count = 0
    unanswered_non_working_count = 0

    for dialog in dialogs_for_today:
        # –î–∏–∞–ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ 'active' –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ '–∑–∞–∫—Ä—ã—Ç—ã' –≤—ã—à–µ, —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç
        # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ process_and_export_data).
        # –û–¥–Ω–∞–∫–æ, –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ 3, 4, 5 –Ω–∞–º –Ω—É–∂–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è.
        speed_and_status = analyze_dialog_speed_and_status(dialog)

        all_response_times_td.extend(speed_and_status['response_times'])

        if speed_and_status['first_response_too_slow']:
            slow_first_response_count += 1

        if speed_and_status['is_unanswered_working']:
            unanswered_working_count += 1

        if speed_and_status['is_unanswered_non_working']:
            unanswered_non_working_count += 1

    # –®–∞–≥ 2: –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ 1 –∏ 2
    report_data_1_2 = process_new_dialogs(dialogs_for_today)

    # –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ú–µ—Ç—Ä–∏–∫–∞ 3)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º len() == 0, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å, –µ—Å–ª–∏ all_response_times_td –ø—É—Å—Ç
    if all_response_times_td:
        total_avg_response_time = sum(all_response_times_td, timedelta()) / len(all_response_times_td)
    else:
        total_avg_response_time = None

    # –®–∞–≥ 4: –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ 6: –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–µ–Ω—å –≤ –¥–µ–Ω—å

    # 4.1. –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è (–ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)
    today_appeal_phones = {normalize_phone(d['client_phone']) for d in dialogs_for_today}

    # 4.2. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ò –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
    day_in_day_orders = get_day_in_day_paid_orders(report_date)

    day_in_day_count = 0
    day_in_day_sum = 0

    for order in day_in_day_orders:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
        customer_phone_number = order.get('customer', {}).get('phones', [{}])[0].get('number')

        if customer_phone_number and normalize_phone(customer_phone_number) in today_appeal_phones:
            # –í—Å–µ 3 —É—Å–ª–æ–≤–∏—è —Å–æ–≤–ø–∞–ª–∏: –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è = –¥–µ–Ω—å —Å–æ–∑–¥–∞–Ω–∏—è = –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã
            day_in_day_count += 1
            day_in_day_sum += order.get('totalSumm', 0)

    # --- –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ---

    report_summary = (
        f"<b>üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –û—Ç—á–µ—Ç –ø–æ —á–∞—Ç–∞–º –∑–∞ {report_date.strftime('%d.%m.%Y')}</b>\n\n"
        # –ú–µ—Ç—Ä–∏–∫–∞ 1
        f"1. –ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: {report_data_1_2['total_new_inquiries']} "
        f"(–§–∏–∑. {report_data_1_2['fiz_count']} / –Æ—Ä. {report_data_1_2['yur_count']})\n\n"

        # –ú–µ—Ç—Ä–∏–∫–∞ 2
        f"2. –ó–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ–¥–µ–Ω–æ: <b>{report_data_1_2['orders_created_count']}</b>\n"
    )

    if report_data_1_2['clients_without_order_links']:
        links_str = "\n".join(
            [f"‚Ä¢ <a href='{link}'>–ö–ª–∏–µ–Ω—Ç</a>" for link in report_data_1_2['clients_without_order_links']])
        report_summary += f"   ‚ùå –ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ ({len(report_data_1_2['clients_without_order_links'])}):\n{links_str}\n\n"
    else:
        report_summary += "   ‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–∞–∫–∞–∑–æ–º.\n\n"

    # –ú–µ—Ç—Ä–∏–∫–∞ 3
    if total_avg_response_time:
        avg_time_str = format_timedelta(total_avg_response_time)
        report_summary += f"3. –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (—Å—Ä. —Ü–∏–∫–ª): <b>{avg_time_str}</b>\n"
    else:
        report_summary += "3. –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (—Å—Ä. —Ü–∏–∫–ª): <b>–ù/–î</b> (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)\n"

    if slow_first_response_count > 0:
        report_summary += f"   üö® –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç (> 5 –º–∏–Ω): <b>{slow_first_response_count} —à—Ç.</b>\n"
    else:
        report_summary += f"   ‚úÖ –í—Å–µ –ø–µ—Ä–≤—ã–µ –æ—Ç–≤–µ—Ç—ã < 5 –º–∏–Ω.\n"

    # –ú–µ—Ç—Ä–∏–∫–∞ 4 –∏ 5
    report_summary += (
        f"4. –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (20:00-23:30): <b>{unanswered_non_working_count} —à—Ç.</b>\n"
        f"5. –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (—Ä–∞–±. –≤—Ä–µ–º—è 9:00-20:00): <b>{unanswered_working_count} —à—Ç.</b>\n\n"
    )

    # –ú–µ—Ç—Ä–∏–∫–∞ 6
    report_summary += (
        f"6. –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–µ–Ω—å –≤ –¥–µ–Ω—å (—à—Ç/—Å—É–º–º–∞): <b>{day_in_day_count} —à—Ç. / {day_in_day_sum:,.0f} —Ä—É–±.</b>"
    )

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #3: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏ —Ç–µ–º—É
    send_report_to_telegram(report_summary, config.TELEGRAM_TOPIC_ID)
    print("\n--- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –û—Ç—á–µ—Ç ---\n" + report_summary)

    logger.info("=== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ===")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    generate_daily_report()
    pass
